#!/bin/bash
# Description: Script for visualazing and fixing trailing tabs and whitespaces
# ./eye_of_v [file-path] [-f | --fix] [-h | -- help]

function usage() {
  echo "USAGE: $0 [file-path] [-f | --fix] [-h | --help]"
  exit 1
}

FIX=0 # Do not perform fix; 1-perform fix

if [ $# -eq 0 ]; then
  usage
fi

while [ $# -gt 0 ]
do
  case "$1" in
    -f|--fix )
	  FIX=1
          shift
          ;;
    --h|--help )
          usage
          shift
          ;;
    * ) if [ -f "$1" ]; then
           FILE="$1"
           shift
        else
           usage
        fi
        ;;
 esac

done

if [ $FIX -eq 1 ] && [ -f "$FILE" ]; then
    echo "Fixing spaces and tabs at the end of lines"
    sed -i '' "s/[[:blank:]]*$//g" "$FILE"   # Spaces at the end of a line ; for mac, the extensions needs to be specified
fi

# Display graphically spaces and tabs
if [ -f $FILE ]; then
  LINES=0
  REGEX_END="[[:blank:]]*$"

  while IFS= read -r line
  do
    let LINES++ 
    #if there is no space or tab issue on the line, print the line
    # if space or tab at the end of the line exit status 9
    echo "$line" | sed '' "/[[:blank:]]*$/q9" > /dev/null
    if [ $? -eq 0 ]; then
        printf %4s "$LINES:" >> temp.txt
        echo "$line" >> temp.txt
        continue
    fi
    # print line number with line with issue
    printf %4s "$LINES: " >> temp.txt

    # print  on the same line the correct part 
    echo -e -n "$line" | sed 's/[[:blank:]]*$//' >> temp.txt

    # print spaces /tabs with red background at the end of the line
    if [[ "$line" =~ $REGEX_END ]]; then
      MATCH=`echo "$BASH_REMATCH" | sed 's/\t/|-TAB-|/g'`
      echo -e "\e[41m$MATCH\e[49m" >> temp.txt
    else
      echo >> temp.txt
    fi
  done < "$FILE"

  cat temp.txt
  rm temp.txt
fi

if [ $FIX -eq 1 ]; then
  echo
  echo -e "\e[42mDONE\e[49m"
fi


